<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<!-- This file is extracted from the tapset files 
   Do not modify this file -->
<chapter id="context_stp">
  <title>Context Functions</title>
  <para>
    The context functions provide additional information about the where
    the event occurred.
    The contact functions can provide information such as a backtrace
    where the event occured
    and the current register values for the processor.
  </para>
<formalpara id="print_regs">
  <title>print_regs()</title>
  <indexterm><primary>print_regs</primary></indexterm>
  <para>
	Print a register dump.
  </para>
</formalpara>
<formalpara id="print_backtrace">
  <title>print_backtrace()</title>
  <indexterm><primary>print_backtrace</primary></indexterm>
  <para>
     Equivalent to <command>print_stack(backtrace())</command>,
     except that deeper stack nesting may be supported.  Return nothing.
  </para>
</formalpara>
<formalpara id="backtrace">
  <title>backtrace:string()</title>
  <indexterm><primary>backtrace</primary></indexterm>
  <para>
	Return a string of hex addresses that are a backtrace of the
     stack.  It may be truncated due to maximum string length.
  </para>
</formalpara>
<formalpara id="execname">
  <title>execname:string()</title>
  <indexterm><primary>execname</primary></indexterm>
  <para>
     Return the name of the current process.
  </para>
</formalpara>
<formalpara id="pid">
  <title>pid:long ()</title>
  <indexterm><primary>pid</primary></indexterm>
  <para>
	Return the id of the current process.
  </para>
</formalpara>
<formalpara id="tid">
  <title>tid:long()</title>
  <indexterm><primary>tid</primary></indexterm>
  <para>
	Return the id of the current thread.
  </para>
</formalpara>
<formalpara id="ppid">
  <title>ppid:long()</title>
  <indexterm><primary>ppid</primary></indexterm>
  <para>
	Return the id of the parent process.
  </para>
</formalpara>
<formalpara id="pexecname">
  <title>pexecname:string()</title>
  <indexterm><primary>pexecname</primary></indexterm>
  <para>
	Return the name of the parent process.
  </para>
</formalpara>
<formalpara id="gid">
  <title>gid:long()</title>
  <indexterm><primary>gid</primary></indexterm>
  <para>
	Return the gid of the current process.
  </para>
</formalpara>
<formalpara id="egid">
  <title>egid:long()</title>
  <indexterm><primary>egid</primary></indexterm>
  <para>
    Return the effective gid of the current process.
  </para>
</formalpara>
<formalpara id="uid">
  <title>uid:long()</title>
  <indexterm><primary>uid</primary></indexterm>
  <para>
	Return the uid of the current process.
  </para>
</formalpara>
<formalpara id="euid">
  <title>euid:long()</title>
  <indexterm><primary>euid</primary></indexterm>
  <para>
	Return the effective uid of the current process.
  </para>
</formalpara>
<formalpara id="cpu">
  <title>cpu:long()</title>
  <indexterm><primary>cpu</primary></indexterm>
  <para>
     Return the current cpu number.
  </para>
</formalpara>
<formalpara id="print_stack">
  <title>print_stack(stk:string)</title>
  <indexterm><primary>print_stack</primary></indexterm>
  <para>
     Perform a symbolic lookup of the addresses in the given  string,
     which  is  assumed  to  be  the  result of a prior call to 
	<xref linkend="backtrace"/>.
     Print one line per address, including the address, the
     name  of the function containing the address, and an estimate of
     its position within that function.  Return nothing.
  </para>
</formalpara>
<formalpara id="pp">
  <title>pp:string()</title>
  <indexterm><primary>pp</primary></indexterm>
  <para>
     Return the probe point associated with the currently running
     probe handler, including alias and wildcard expansion effects.
  </para>
</formalpara>
<formalpara id="probefunc">
  <title>probefunc:string()</title>
  <indexterm><primary>probefunc</primary></indexterm>
  <para>
	Return the probe point's function name, if known.
  </para>
</formalpara>
<formalpara id="probemod">
  <title>probemod:string()</title>
  <indexterm><primary>probemod</primary></indexterm>
  <para>
	Return the probe point's module name, if known.
  </para>
</formalpara>
<formalpara id="registers_valid">
  <title>registers_valid:long()</title>
  <indexterm><primary>registers_valid</primary></indexterm>
  <para>
	Return 1 if register() and u_register() can be used
     in the current context, or 0 otherwise.
     For example, <command>registers_valid()</command> returns 0
     when called from a begin or end probe.
  </para>
</formalpara>
<formalpara id="user_mode">
  <title>user_mode:long()</title>
  <indexterm><primary>user_mode</primary></indexterm>
  <para>
	Return 1 if the probe point occurred in user-mode.
  </para>
</formalpara>
<formalpara id="is_return">
  <title>is_return:long()</title>
  <indexterm><primary>is_return</primary></indexterm>
  <para>
	Return 1 if the probe point is a return probe.
     <emphasis>Deprecated.</emphasis>
  </para>
</formalpara>
<formalpara id="target">
  <title>target:long()</title>
  <indexterm><primary>target</primary></indexterm>
  <para>
	Return the pid of the target process.
  </para>
</formalpara>
<formalpara id="module_name">
  <title>module_name:string()</title>
  <indexterm><primary>module_name</primary></indexterm>
  <para>
	FIXME: need description.
  </para>
</formalpara>
<formalpara id="stp_pid">
  <title>stp_pid:long()</title>
  <indexterm><primary>stp_pid</primary></indexterm>
  <para>
	FIXME: need description.
  </para>
</formalpara>
<formalpara id="stack_size">
  <title>stack_size:long()</title>
  <indexterm><primary>stack_size</primary></indexterm>
  <para>
	Return the size of the kernel stack.
  </para>
</formalpara>
<formalpara id="stack_used">
  <title>stack_used:long ()</title>
  <indexterm><primary>stack_used</primary></indexterm>
  <para>
	Return how many bytes are currently used in the kernel stack.
  </para>
</formalpara>
<formalpara id="stack_unused">
  <title>stack_unused:long()</title>
  <indexterm><primary>stack_unused</primary></indexterm>
  <para>
	Return how many bytes are currently available in the kernel stack.
  </para>
</formalpara>
<formalpara id="caller_addr">
  <title>caller_addr:long()</title>
  <indexterm><primary>caller_addr</primary></indexterm>
  <para>
    Return the address of the calling function.
    <emphasis> Works only for return probes at this time.</emphasis>
	
  </para>
</formalpara>
<formalpara id="caller">
  <title>caller:string()</title>
  <indexterm><primary>caller</primary></indexterm>
  <para>
     Return the address and name of the calling function.
	<emphasis>Works only for return probes at this time.</emphasis>
  </para>
</formalpara>
</chapter>
