// UDP tapset
// Copyright (C) 2006 Intel Corporation.
//
// This file is part of systemtap, and is free software.  You can
// redistribute it and/or modify it under the terms of the GNU General
// Public License (GPL); either version 2, or (at your option) any
// later version.
// <tapsetdescription>
// This family of probe points is used to probe events that occur in the UDP layer. 
// </tapsetdescription>
%{
#include <linux/version.h>
#include <net/sock.h>
#include <net/udp.h>
#include <net/ip.h>
%}

/**
  * probe udp.sendmsg - Fires whenever a process sends a UDP message  
  * @name: Name of this probe
  * @sock: Network socket 
  * @size: Number of bytes to send  
  *
  * Context:
  *   The process which sends a udp message 
  */
probe udp.sendmsg = kernel.function("udp_sendmsg") {
	name = "udp.sendmsg"
	sock    = $sk
	size    = $len
}

/**
  * probe udp.sendmsg.return - Fires whenever an attempt to send a UDP message is completed
  * @name: Name of this probe
  * @size: Number of bytes sent 
  *
  * Context:
  *   The process which sends a udp message
  */
probe udp.sendmsg.return = kernel.function("udp_sendmsg").return {
	name = "udp.sendmsg"
	size = $return 
}

/**
  * probe udp.recvmsg - Fires whenever a UDP message is received
  * @name: Name of this probe
  * @sock: Network socket
  * @size: Number of bytes received  
  *
  * Context:
  *  The process which receives a udp message
  */
probe udp.recvmsg = kernel.function("udp_recvmsg") {
	name = "udp.recvmsg"
	sock    = $sk
	size    = $len
}

/**
  * probe udp.recvmsg.return - An attempt to receive a UDP message received has been completed
  * @name: Name of this probe
  * @size: Number of bytes received
  *
  * Context:
  *  The process which receives a udp message
  */
probe udp.recvmsg.return = kernel.function("udp_recvmsg").return {
	name = "udp.recvmsg"
	size = $return 
}

/**
  * probe udp.disconnect - A process requests for UPD to be UDP disconnected 
  * @name: Name of this probe
  * @sock: Network socket 
  * @flags: Flags (e.g. FIN, etc)  
  *
  * Context:
  *  The process which disconnects UDP 
  */
probe udp.disconnect = kernel.function("udp_disconnect") {
	name = "udp.disconnect"
	sock  = $sk
	flags = $flags
}

/**
  * probe udp.disconnect.return - UDP has been disconnected successfully
  * @name: Name of this probe
  * @ret: Error code (0: no error) 
  *
  * Context:
  *  The process which disconnects udp 
  */
probe udp.disconnect.return = kernel.function("udp_disconnect").return {
	name = "udp.disconnect"
	ret = $return 
}
