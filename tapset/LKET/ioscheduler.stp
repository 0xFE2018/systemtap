// Copyright (C) 2005, 2006 IBM Corp.
//
// This file is part of systemtap, and is free software.  You can
// redistribute it and/or modify it under the terms of the GNU General
// Public License (GPL); either version 2, or (at your option) any
// later version.

probe addevent.ioscheduler
	= addevent.ioscheduler.elv_next_request,
	addevent.ioscheduler.elv_add_request,
	addevent.ioscheduler.elv_completed_request
{}

probe addevent.ioscheduler.elv_next_request
	= addevent.ioscheduler.elv_next_request.entry,
	addevent.ioscheduler.elv_next_request.return
{}

%{
#include <linux/blkdev.h>
#include <linux/elevator.h>
%}

/* when a request is retrieved from request queue */
probe addevent.ioscheduler.elv_next_request.entry
	+= _addevent.ioscheduler.elv_next_request.entry
{
	update_record()
}

probe _addevent.ioscheduler.elv_next_request.entry
	=  ioscheduler.elv_next_request
{
	log_ioscheduler_tracedata_elv_next_entry(elevator_name)
}

probe addevent.ioscheduler.elv_next_request.return
	+= _addevent.ioscheduler.elv_next_request.return
{
	update_record()
}

probe _addevent.ioscheduler.elv_next_request.return
	= ioscheduler.elv_next_request.return
{
	log_ioscheduler_tracedata_elv_next_return(disk_major, disk_minor, req, req_flags)
}


/* when a request is added to the request queue */
probe addevent.ioscheduler.elv_add_request
	+= _addevent.ioscheduler.elv_add_request
{
	update_record()
}

probe _addevent.ioscheduler.elv_add_request
	= ioscheduler.elv_add_request
{
	log_ioscheduler_tracedata_others(HOOKID_IOSCHED_ADD_REQ, 
		elevator_name, disk_major, disk_minor, req, req_flags)
}

/* when a request is completed */
probe addevent.ioscheduler.elv_completed_request
	+= _addevent.ioscheduler.elv_completed_request
{
	update_record()
}

probe _addevent.ioscheduler.elv_completed_request
	= ioscheduler.elv_completed_request
{
	log_ioscheduler_tracedata_others(HOOKID_IOSCHED_ADD_REQ, 
		elevator_name, disk_major, disk_minor, req, req_flags)
}

function log_ioscheduler_tracedata_others(var_id:long, elv_name:string, major:long, 
		minor:long, rq:long, flag:long)
%{
	/* elevator name|major|minor|request|request_flags  */

	_lket_trace(_GROUP_IOSCHED, THIS->var_id, "%0s%1b%1b%8b%8b", 
		THIS->elv_name, THIS->major, THIS->minor, THIS->rq, THIS->flag);

%}

/* log the data specific to elv_next_request */
function log_ioscheduler_tracedata_elv_next_entry(elv_name:string)
%{
	_lket_trace(_GROUP_IOSCHED, _HOOKID_IOSCHED_NEXT_REQ_ENTRY, "%0s", THIS->elv_name);
%}

function log_ioscheduler_tracedata_elv_next_return(major:long, minor:long, req:long, req_flags:long)
%{
	_lket_trace(_GROUP_IOSCHED, _HOOKID_IOSCHED_NEXT_REQ_RETURN, "%1b%1b%8b%8b",
		THIS->major, THIS->minor, THIS->req, THIS->req_flags);
%}

