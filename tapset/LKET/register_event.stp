// Copyright (C) 2006 IBM Corp.
//
// This file is part of systemtap, and is free software.  You can
// redistribute it and/or modify it under the terms of the GNU General
// Public License (GPL); either version 2, or (at your option) any
// later version.

global evt_name, evt_fmt
global usr_evt_name, usr_evt_fmt

%{

#define _MAXGROUPID  20
#define _MAXHOOKID   40

int get_fmtcode(char *fmt)
{
	if(strncmp(fmt, "INT8", 4) != 0 &&
		strncmp(fmt, "INT16", 5) != 0 &&
		strncmp(fmt, "INT32", 5) != 0 &&
		strncmp(fmt, "INT64", 5) != 0 &&
		strncmp(fmt, "STRING", 6) != 0)  
		return -1;
	else
		return 0;
}

%}

function dummy_c_function()
%{
%}

function register_user_event(grpid:long, hookid:long,fmt:string, name:string) 
{
	usr_evt_fmt[grpid, hookid] = fmt
	usr_evt_name[grpid, hookid] = name
	dummy_c_function() /* ensure register_user_event won't be compiled away */
}

function register_sys_event(grpid:long, hookid:long,fmt:string, name:string) 
{
	evt_fmt[grpid, hookid] = fmt
	evt_name[grpid, hookid] = name
	dummy_c_function() /* ensure register_user_event won't be compiled away */
}


function write_events_desc()
{
	foreach([grpid, hookid] in evt_fmt)
	{
		register_event(grpid, hookid, HOOKID_REGSYSEVT, 
			evt_fmt[grpid, hookid], evt_name[grpid, hookid])
	}
	foreach([grpid, hookid] in usr_evt_fmt)
	{
		register_event(grpid, hookid, HOOKID_REGUSREVT,
			usr_evt_fmt[grpid, hookid], usr_evt_name[grpid, hookid])
	}

	delete evt_name
	delete evt_fmt
	delete usr_evt_name
	delete usr_evt_fmt
}	

function register_event(grpid:long, hookid:long, evt_type:long, fmt:string, names:string)
%{
	char in_fmt[512], in_name[512];
	char *p_in_fmt, *p_in_name;
	char *fmt, *name;
        int cpu = smp_processor_id();
	char *total_length;
	p_in_fmt = in_fmt;
	p_in_name = in_name;

	if(THIS->fmt==NULL || THIS->names==NULL)  {
		_stp_warn("error fmt/names in register_user_event\n");
		_stp_exit();
	}

	if( THIS->grpid <= 0 || THIS->grpid > _MAXGROUPID ||
		THIS->hookid <= 0 || THIS->hookid > _MAXHOOKID)  {
		_stp_warn("wrong range in groupid/hookid, grp:%d, hkid:%d\n",
			THIS->grpid, THIS->hookid);
		_stp_exit();
	}

	strncpy(in_fmt, THIS->fmt, 512);
	strncpy(in_name, THIS->names, 512);

	fmt = strsep(&p_in_fmt, ":");
	name = strsep(&p_in_name, ":");

	while(fmt!=NULL && name!=NULL)  {
		if(get_fmtcode(fmt) == -1)  {
			_stp_warn("error in fmt string\n");
			_stp_exit();
		}
		fmt = strsep(&p_in_fmt, ":");
		name = strsep(&p_in_name, ":");
	}

	if(fmt!=NULL || name != NULL)  {
		_stp_warn("unpaired types/names, grpid:%d, hookid:%d\n",
			THIS->grpid, THIS->hookid);
		_stp_exit();
	}

	_lket_trace(_GROUP_REGEVT, THIS->evt_type, "%1b%1b%0s%0s", THIS->grpid,
		THIS->hookid, THIS->fmt, THIS->names); 

#if !defined(ASCII_TRACE)
        total_length = &_stp_pbuf[cpu][STP_PRINT_BUF_START];
        *(int16_t *)total_length = _stp_pbuf_len[cpu] - 4;
#endif
	_stp_print_flush();

%}

function register_sys_events()
{
	register_sys_event(GROUP_SYSCALL, HOOKID_SYSCALL_ENTRY, "STRING", "syscall")
	register_sys_event(GROUP_SYSCALL, HOOKID_SYSCALL_RETURN, "STRING", "syscall")
		
	register_sys_event(GROUP_PROCESS, HOOKID_PROCESS_SNAPSHOT,
		"INT32:INT32:INT32:STRING", "tid:pid:ppid:pname")
	register_sys_event(GROUP_PROCESS, HOOKID_PROCESS_EXECVE,
		"INT32:STRING", "pid:pname")
	register_sys_event(GROUP_PROCESS, HOOKID_PROCESS_FORK,
		"INT32:INT32:INT32", "tid:pid:ppid")

	register_sys_event(GROUP_IOSCHED, HOOKID_IOSCHED_NEXT_REQ,
		"STRING:INT8:INT8:INT64:INT64", "elv_name:major:minor:request:req_flags")

	register_sys_event(GROUP_IOSCHED, HOOKID_IOSCHED_ADD_REQ,
		"STRING:INT8:INT8:INT64:INT64", "elv_name:major:minor:request:req_flags")

	register_sys_event(GROUP_IOSCHED, HOOKID_IOSCHED_COMPLETE_REQ,
		"STRING:INT8:INT8:INT64:INT64", "elv_name:major:minor:request:req_flags")

	register_sys_event(GROUP_TASK, HOOKID_TASK_CTXSWITCH,
		"INT32:INT32:INT8", "prev_pid:next_pid:prev_state")

	register_sys_event(GROUP_TASK, HOOKID_TASK_CPUIDLE,
		"INT32", "cur_pid")

	register_sys_event(GROUP_SCSI, HOOKID_SCSI_IOENTRY,
		"INT8:INT8:INT8:INT64", "major:minor:sdev_state:request")

	register_sys_event(GROUP_SCSI, HOOKID_SCSI_IO_TO_LLD,
		"INT8:INT32:INT8:INT64:INT32:INT64:INT64",
		"sdev_state:scsi_info:data_dir:req_buff:buf_len:cmd_id:request")

	register_sys_event(GROUP_SCSI, HOOKID_SCSI_IODONE_BY_LLD,
		"INT32:INT8:INT64:INT64", "scsi_info:data_dir:cmd_id:request")

	register_sys_event(GROUP_SCSI, HOOKID_SCSI_IOCOMP_BY_MIDLEVEL,
		"INT32:INT8:INT64:INT32:INT64", "scsi_info:data_dir:cmd_id:bytes:request");

	register_sys_event(GROUP_PAGEFAULT, HOOKID_PAGEFAULT,
		"INT64:INT8", "addr:write")

	register_sys_event(GROUP_NETDEV, HOOKID_NETDEV_RECEIVE,
		"STRING:INT32:INT16:INT32", "dev_name:data_len:protocol:buff_size")

	register_sys_event(GROUP_NETDEV, HOOKID_NETDEV_TRANSMIT,
		"STRING:INT32:INT16:INT32", "dev_name:data_len:protocol:buff_size")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_OPEN_ENTRY,
		"STRING:INT32:INT32", "filename:flags:mode")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_OPEN_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_CLOSE_ENTRY,
		"INT64", "fd")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_CLOSE_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READ_ENTRY,
		"INT64:INT64:INT64", "fd:buff_addr:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READ_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_WRITE_ENTRY,
		"INT64:INT64:INT64", "fd:buff_addr:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_WRITE_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READV_ENTRY,
		"INT64:INT64:INT64", "fd:vector_uaddr:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READV_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_WRITEV_ENTRY,
		"INT64:INT64:INT64", "fd:vector_uaddr:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_WRITEV_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_PREAD64_ENTRY,
		"INT64:INT64:INT64:INT64", "fd:buff_uaddr:count:offset")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_PREAD64_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_PWRITE64_ENTRY,
		"INT64:INT64:INT64:INT64", "fd:buff_uaddr:count:offset")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_PWRITE64_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READAHEAD_ENTRY,
		"INT64:INT64:INT64", "fd:offset:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_READAHEAD_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_SENDFILE_ENTRY,
		"INT64:INT64:INT64:INT64", "out_fd:in_fd:offset_uaddr:count")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_SENDFILE_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_LSEEK_ENTRY,
		"INT64:INT64:INT8", "fd:offset:whence")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_LSEEK_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_LLSEEK_ENTRY,
		"INT64:INT64:INT64:INT64:INT8b", 
		"fd:offset_high:offset_low:result_uaddr:whence")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_LLSEEK_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_SYNC_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FSYNC_ENTRY,
		"INT64", "fd")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FSYNC_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FDATASYNC_ENTRY,
		"INT64", "fd")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FDATASYNC_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FLOCK_ENTRY,
		"INT64:INT32", "fd:operation")
	register_sys_event(GROUP_IOSYSCALL, HOOKID_IOSYSCALL_FLOCK_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SETUP_ENTRY,
		"INT32:INT64", "nr_events:ctxp_uaddr")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SETUP_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SUBMIT_ENTRY,
		"INT64:INT32:INT64", "ctx_id:nr:iocbpp_uaddr")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SUBMIT_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SUBMIT_ONE_ENTRY,
		"INT64:INT64:INT16:INT16:INT32:INT64:INT64:INT64", 
		"ctx:user_iocb_uaddr:aio_lio_opcode:aio_reqprio:aio_fildes:aio_buf:aio_nbytes:aio_offset")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_SUBMIT_ONE_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_DESTROY_ENTRY,
		"INT64", "ctx")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_DESTROY_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_GETEVENTS_ENTRY,
		"INT64:INT32:INT32:INT64:INT32:INT32", 
		"ctx_id:min_nr:nr:events_uaddr:tv_sec:tv_nsec")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_GETEVENTS_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_CANCEL_ENTRY,
		"INT64:INT64:INT64", 
		"ctx_id:iocb_uaddr:result_uaddr")
	register_sys_event(GROUP_AIO, HOOKID_AIO_IO_CANCEL_RETURN,
		"INT64", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SEND_ENTRY,
		"INT8:INT8:INT8:INT32", "sig:shared:send2queue:pid")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SEND_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSKILL_ENTRY,
		"INT32:INT8", "pid:sig")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSKILL_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSTGKILL_ENTRY,
		"INT32:INT32:INT8", "tid:pid:sig")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSTGKILL_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSTKILL_ENTRY,
		"INT32:INT8", "pid:sig")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_SYSTKILL_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_PENDING_ENTRY,
		"INT32:INT32", "sigset_addr:setsize");
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_PENDING_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_DOACTION_ENTRY,
		"INT8:INT64", "sig:handler")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_DOACTION_RETURN,
		"INT16", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_PROC_MASK_ENTRY,
		"INT8:INT64", "how:sigset")
	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_PROC_MASK_RETURN,
		"INT8", "return")

	register_sys_event(GROUP_SIGNAL, HOOKID_SIGNAL_FLUSH_ENTRY,
		"INT32", "pid")
			
}


probe register_event = begin
{
	hookid_init()
}
