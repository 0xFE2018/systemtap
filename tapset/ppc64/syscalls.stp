# PPC64-specific system calls

# compat_sys_futex ________________________________________
#
# asmlinkage long compat_sys_futex(u32 __user *uaddr, int op, int val,
#		struct compat_timespec __user *utime, u32 __user *uaddr2,
#		int val3)
#
probe syscall.compat_sys_futex = kernel.function("compat_sys_futex") {
	name = "compat_sys_futex"
	futex_uaddr = $uaddr
	op = $op
	val = $val
	utime_uaddr = $utime
	uaddr2_uaddr = $uaddr2
	val3 = $val3
	argstr = sprintf("%p, %s, %d, %s", $uaddr, _futex_op_str($op),
				$val, _struct_timespec_u($utime))
}
probe syscall.compat_sys_futex.return =
	kernel.function("compat_sys_futex").return {
	name = "compat_sys_futex"
	retstr = returnstr(1)
}
# compat_sys_newlstat ________________________________________
#
# asmlinkage long compat_sys_newlstat(char __user * filename,
#		struct compat_stat __user *statbuf)
#
probe syscall.compat_sys_newlstat = kernel.function("compat_sys_newlstat") {
	name = "compat_sys_newlstat"
	path = user_string($filename)
	buf_uaddr = $statbuf
	argstr = sprintf("%s, %p", user_string_quoted($filename), buf_uaddr)
}
probe syscall.compat_sys_newlstat.return =
	kernel.function("compat_sys_newlstat").return {
	name = "compat_sys_newlstat"
	retstr = returnstr(1)
}

# compat_sys_fcntl64 ________________________________________
#
# asmlinkage long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
#			unsigned long arg)
#
probe syscall.compat_sys_fcntl64 = kernel.function("compat_sys_fcntl64") {
	name = "compat_sys_fcntl64"
	fd = $fd
	cmd = $cmd
	arg = $arg
	argstr = sprintf("%d, %s, %p", fd, _fcntl_cmd_str($cmd), arg)
}
probe syscall.compat_sys_fcntl64.return =
	kernel.function("compat_sys_fcntl64").return {
	name = "compat_sys_fcntl64"
	retstr = returnstr(1)
}
# compat_sys_fcntl ________________________________________
#
# asmlinkage long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
#			unsigned long arg)
#
probe syscall.compat_sys_fcntl = kernel.function("compat_sys_fcntl") {
	name = "compat_sys_fcntl"
	fd = $fd
	cmd = $cmd
	arg = $arg
	argstr = sprintf("%d, %s, %p", fd, _fcntl_cmd_str($cmd), arg)
}
probe syscall.compat_sys_fcntl.return =
	kernel.function("compat_sys_fcntl").return {
	name = "compat_sys_fcntl"
	retstr = returnstr(1)
}

# compat_sys_mq_open ________________________________________
#
# asmlinkage long compat_sys_mq_open(const char __user *u_name,
#			int oflag, compat_mode_t mode,
#			struct compat_mq_attr __user *u_attr)
#
probe syscall.compat_sys_mq_open = kernel.function("compat_sys_mq_open") {
	name = "compat_sys_mq_open"
	name_uaddr = $u_name
	name_str = user_string($u_name)
	oflag = $oflag
	mode = $mode
	u_attr_uaddr = $u_attr
	argstr = sprintf("\"%s\", %d, %d, %p", name_str, oflag, mode,
				u_attr_uaddr) 
}
probe syscall.compat_sys_mq_open.return =
	kernel.function("compat_sys_mq_open").return {
	name = "compat_sys_mq_open"
	retstr = returnstr(1)
}
# compat_sys_mq_timedsend ________________________________________
#
# asmlinkage long compat_sys_mq_timedsend(mqd_t mqdes,
#			const char __user *u_msg_ptr,
#			size_t msg_len, unsigned int msg_prio,
#			const struct compat_timespec __user *u_abs_timeout)
#
probe syscall.compat_sys_mq_timedsend = kernel.function("compat_sys_mq_timedsend") {
	name = "compat_sys_mq_timedsend"
	mqdes = $mqdes
	msg_ptr_uaddr = $u_msg_ptr
	msg_len = $msg_len
	msg_prio = $msg_prio
	abs_timeout_uaddr = $u_abs_timeout
	argstr = "FIXME"
}
probe syscall.compat_sys_mq_timedsend.return =
	kernel.function("compat_sys_mq_timedsend").return {
	name = "compat_sys_mq_timedsend"
	retstr = returnstr(1)
}
# compat_sys_mq_timedreceive ________________________________________
#
# asmlinkage ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,
#			char __user *u_msg_ptr,
#			size_t msg_len, unsigned int __user *u_msg_prio,
#			const struct compat_timespec __user *u_abs_timeout)
#
probe syscall.compat_sys_mq_timedreceive = kernel.function("compat_sys_mq_timedreceive") {
	name = "compat_sys_mq_timedreceive"
	mqdes = $mqdes
	msg_ptr_uaddr = $u_msg_ptr
	msg_len = $msg_len
	msg_prio_uaddr = $u_msg_prio
	abs_timout_uaddr = $u_abs_timeout
	argstr = "FIXME"
}
probe syscall.compat_sys_mq_timedreceive.return =
	kernel.function("compat_sys_mq_timedreceive").return {
	name = "compat_sys_mq_timedreceive"
	retstr = returnstr(1)
}
# compat_sys_mq_notify ________________________________________
#
# asmlinkage long compat_sys_mq_notify(mqd_t mqdes,
#			const struct compat_sigevent __user *u_notification)
#
probe syscall.compat_sys_mq_notify = kernel.function("compat_sys_mq_notify") {
	name = "compat_sys_mq_notify"
	mqdes = $mqdes
	notification_uaddr = $u_notification
	argstr = sprintf("%d, %p", mqdes, notification_uaddr)
}
probe syscall.compat_sys_mq_notify.return =
	kernel.function("compat_sys_mq_notify").return {
	name = "compat_sys_mq_notify"
	retstr = returnstr(1)
}
# compat_sys_mq_getsetattr ________________________________________
#
# asmlinkage long compat_sys_mq_getsetattr(mqd_t mqdes,
#			const struct compat_mq_attr __user *u_mqstat,
#			struct compat_mq_attr __user *u_omqstat)
#
probe syscall.compat_sys_mq_getsetattr =
	kernel.function("compat_sys_mq_getsetattr") {
	name = "compat_sys_mq_getsetattr"
	mqdes = $mqdes
	u_mqstat_uaddr = $u_mqstat
	u_omqstat_uaddr = $u_omqstat
	argstr = sprintf("%d, %p, %p", mqdes, u_mqstat_uaddr,
				u_omqstat_uaddr)
}
probe syscall.compat_sys_mq_getsetattr.return =
	kernel.function("compat_sys_mq_getsetattr").return {
	name = "compat_sys_mq_getsetattr"
	retstr = returnstr(1)
}
# compat_sys_keyctl ________________________________________
#
# asmlinkage long compat_sys_keyctl(u32 option,
#			u32 arg2, u32 arg3, u32 arg4, u32 arg5)
#
/* FIXME 
probe syscall.compat_sys_keyctl = kernel.function("compat_sys_keyctl") {
	name = "compat_sys_keyctl"
	option = $option
	arg2 = $arg2
	arg3 = $arg3
	arg4 = $arg4
	arg5 = $arg5
	argstr = sprintf("%d, %d, %d, %d, %d", option, arg2, arg3,
				arg4, arg5)
}
probe syscall.compat_sys_keyctl.return =
	kernel.function("compat_sys_keyctl").return {
	name = "compat_sys_keyctl"
	retstr = returnstr(1)
}
*/

#sys32_open _______________________________________________________
# asmlinkage long sys32_open(const char * filename, int flags, int mode)
probe syscall.sys32_open = kernel.function("sys32_open") ? {
	name = "open"
	filename_uaddr = $filename
	path = user_string($filename)
	flags = $flags
	mode = $mode
	if (flags & 64)
	argstr = sprintf("%s, %s, %#o", user_string_quoted($filename),
				_sys_open_flag_str(flags), mode)
	else
	argstr = sprintf("%s, %s", user_string_quoted(filename), _sys_open_flag_str(flags))
}
probe syscall.sys32_open.return = kernel.function("sys32_open").return ? {
	name = "open"
	retstr = returnstr(1)
}
# old32_readdir ________________________________________
#
# asmlinkage int old32_readdir(unsigned int fd,
#	struct old_linux_dirent32 __user *dirent,
#	unsigned int count)
#
probe syscall.old32_readdir = kernel.function("old32_readdir") {
	name = "old32_readdir"
	fd = $fd
	dirp_uaddr = $dirent
	count = $count
	argstr = sprintf("%d, %p, %d", fd, dirp_uaddr, count)
}
probe syscall.old32_readdir.return =
	kernel.function("old32_readdir").return {
	name = "old32_readdir"
	retstr = returnstr(1)
}
# sys64_time ________________________________________
#
# time_t sys64_time(time_t __user * tloc)
#
%( kernel_v <= "2.6.15" %?

probe syscall.sys64_time = kernel.function("sys64_time") {
	name = "sys64_time"
	/* FIXME */
	t_uaddr = $tloc
	argstr = sprintf("%p", t_uaddr)
}
probe syscall.sys64_time.return = kernel.function("sys64_time").return {
	name = "sys64_time"
	retstr = returnstr(1)
}
%)
# ppc64_personality ________________________________________
#
# long ppc64_personality(unsigned long personality)
#
probe syscall.ppc64_personality = kernel.function("ppc64_personality") {
	name = "ppc64_personality"
	persona = $personality
	argstr = sprint($personality)
}
probe syscall.ppc64_personality.return =
	kernel.function("ppc64_personality").return {
	name = "ppc64_personality"
	retstr = returnstr(1)
}
# ppc_rtas ________________________________________
#
# asmlinkage int ppc_rtas(struct rtas_args __user *uargs)
#
probe syscall.ppc_rtas = kernel.function("ppc_rtas") {
	name = "ppc_rtas"
	uargs_uaddr = $uargs
	argstr = sprintf("%p", uargs_uaddr)
}
probe syscall.ppc_rtas.return = kernel.function("ppc_rtas").return {
	name = "ppc_rtas"
	retstr = returnstr(1)
}

# sys32_execve ________________________________________
#
# long sys32_execve(unsigned long a0, unsigned long a1, unsigned long a2,
#                  unsigned long a3, unsigned long a4, unsigned long a5,
#                  struct pt_regs *regs)
#
probe syscall.sys32_execve = kernel.function("sys32_execve") ? {
	name = "sys32_execve"
	filename = user_string($a0)
	args = __get_argv($a1, 0) 
	argstr = sprintf("%s %s", user_string_quoted($a0), __get_argv($a1, 1))
}
probe syscall.sys32_execve.return =
	kernel.function("sys32_execve").return ? {
	name = "sys32_execve"
	retstr = returnstr(1)
}


# ppc64_sys32_stime ________________________________________
#
# long ppc64_sys32_stime(int __user * tptr)
#
probe syscall.ppc64_sys32_stime = kernel.function("ppc64_sys32_stime") ? {
	name = "ppc64_sys32_stime"
	/* FIXME */
	t_uaddr = $tptr
	argstr = sprintf("%p", t_uaddr)
}
probe syscall.ppc64_sys32_stime.return =
	kernel.function("ppc64_sys32_stime").return ? {
	name = "ppc64_sys32_stime"
	retstr = returnstr(1)
}

# sys32_ptrace ________________________________________
#
# int sys32_ptrace(long request, long pid, unsigned long addr,
#		unsigned long data)
#
probe syscall.sys32_ptrace = kernel.function("sys32_ptrace") ? {
	name = "sys32_ptrace"
	request = $request
	pid = $pid
	addr = $addr
	data = $data
	argstr = sprintf("%p, %p, %p, %p", request, pid,
				addr, data)
}
probe syscall.sys32_ptrace.return = kernel.function("sys32_ptrace").return ? {
	name = "sys32_ptrace"
	retstr = returnstr(1)
}
# sys32_sysinfo ________________________________________
#
# asmlinkage long sys32_sysinfo(struct sysinfo32 __user *info)
#
probe syscall.sys32_sysinfo = kernel.function("sys32_sysinfo") ? {
	name = "sys32_sysinfo"
	info_uaddr = $info
	argstr = sprintf("%p", info_uaddr)
}
probe syscall.sys32_sysinfo.return =
	kernel.function("sys32_sysinfo").return ? {
	name = "sys32_sysinfo"
	retstr = returnstr(1)
}

# ipc ________________________________________
#
# long sys32_ipc(u32 call, u32 first, u32 second, u32 third,
#			compat_uptr_t ptr, u32 fifth)
#
probe syscall.ipc = kernel.function("sys32_ipc") ? {
	name = "ipc"
	argstr = sprintf("%d, %d, %d, %d, %p, %d", $call, $first, $second,
				$third, $ptr, $fifth) 
}
probe syscall.ipc.return = kernel.function("sys32_ipc").return ? {
	name = "sys_ipc"
	retstr = returnstr(1)
}

# sys32_sigreturn ________________________________________
#
# long sys32_sigreturn(int r3, int r4, int r5, int r6, int r7, int r8,
#			struct pt_regs *regs)
#
probe syscall.sys32_sigreturn = kernel.function("sys32_sigreturn") ? {
	name = "sys32_sigreturn"
	r3 = $r3
	r4 = $r4
	r5 = $r5
	r6 = $r6
	r7 = $r7
	r8 = $r8
	argstr = sprintf("%p, %p, %p, %p, %p, %p",
				 r3, r4, r5, r6, r7, r8)
}
probe syscall.sys32_sigreturn.return =
	kernel.function("sys32_sigreturn").return ? {
	name = "sys32_sigreturn"
	retstr = returnstr(1)
}
# sys32_adjtimex ________________________________________
#
# asmlinkage long sys32_adjtimex(struct timex32 __user *utp)
#
probe syscall.sys32_adjtimex = kernel.function("sys32_adjtimex") ? {
	name = "sys32_adjtimex"
	argstr = sprintf("%p", $utp)
}
probe syscall.sys32_adjtimex.return = kernel.function("sys32_adjtimex").return ? {
	name = "sys32_adjtimex"
	retstr = returnstr(1)
}

# sys32_getdents ________________________________________
#
# asmlinkage long sys32_getdents(unsigned int fd,
#			struct linux_dirent32 __user *dirent,
#			unsigned int count)
#
probe syscall.sys32_getdents = kernel.function("sys32_getdents") ? {
	name = "sys32_getdents"
	fd = $fd
	dirp_uaddr = $dirent
	count = $count
	argstr = sprintf("%d, %p, %d", fd, dirp_uaddr, count)
}
probe syscall.sys32_getdents.return =
	kernel.function("sys32_getdents").return ? {
	name = "sys32_getdents"
	retstr = returnstr(1)
}

# compat_sys_sysctl ________________________________________
#
# long compat_sys_sysctl(struct __sysctl_args32 __user *args)
#
probe syscall.compat_sysctl = kernel.function("compat_sys_sysctl") ? {
	name = "sysctl"
	argstr = sprintf("%p", $args)
}
probe syscall.compat_sysctl.return = kernel.function("compat_sys_sysctl").return ? {
	name = "sysctl"
	retstr = returnstr(1)
}

# sys32_sched_setparam ________________________________________
#
# asmlinkage long sys32_sched_setparam(u32 pid,
#		struct sched_param __user *param)
#
probe syscall.sys32_sched_setparam = kernel.function("sys32_sched_setparam") ? {
	name = "sys32_sched_setparam"
	pid = $pid
	param_uaddr = $param
	argstr = sprintf("%d, %p", pid, param_uaddr)
}
probe syscall.sys32_sched_setparam.return =
	kernel.function("sys32_sched_setparam").return ? {
	name = "sys32_sched_setparam"
	retstr = returnstr(1)
}

# sys32_sched_rr_get_interval ________________________________________
#
# asmlinkage long sys32_sched_rr_get_interval(u32 pid,
#		struct compat_timespec __user *interval)
#
probe syscall.sys32_sched_rr_get_interval =
		kernel.function("sys32_sched_rr_get_interval") ? {
	name = "sys32_sched_rr_get_interval"
	pid = $pid
	interval_uaddr = $interval
	argstr = sprintf("%d, %p", pid, interval_uaddr)  
}
probe syscall.sys32_sched_rr_get_interval.return =
	kernel.function("sys32_sched_rr_get_interval").return ? {
	name = "sys32_sched_rr_get_interval"
	retstr = returnstr(1)
}

# sys32_rt_sigpending ________________________________________
#
# long sys32_rt_sigpending(compat_sigset_t __user *set,
#			compat_size_t sigsetsize)
#
probe syscall.sys32_rt_sigpending = kernel.function("sys32_rt_sigpending") ? {
	name = "sys32_rt_sigpending"
	set_uaddr = $set
	sigsetsize = $sigsetsize
	argstr = sprintf("%p, %d", set_uaddr, $sigsetsize)
}
probe syscall.sys32_rt_sigpending.return =
	kernel.function("sys32_rt_sigpending").return ? {
	name = "sys32_rt_sigpending"
	retstr = returnstr(1)
}
# sys32_rt_sigtimedwait ________________________________________
#
# long sys32_rt_sigtimedwait(compat_sigset_t __user *uthese,
#			compat_siginfo_t __user *uinfo,
#			struct compat_timespec __user *uts,
#			compat_size_t sigsetsize)
#
probe syscall.sys32_rt_sigtimedwait =
		kernel.function("sys32_rt_sigtimedwait") ? {
	name = "sys32_rt_sigtimedwait"
	uthese_uaddr = $uthese
	uinfo_uaddr = $uinfo
	uts_uaddr = $uts
	sigsetsize = $sigsetsize
	argstr = sprintf("%p, %p, %p, %p", uthese_uaddr,
			uinfo_uaddr, uts_uaddr, sigsetsize)
}
probe syscall.sys32_rt_sigtimedwait.return =
	kernel.function("sys32_rt_sigtimedwait").return ? {
	name = "sys32_rt_sigtimedwait"
	retstr = returnstr(1)
}
# sys32_rt_sigqueueinfo ________________________________________
#
# long sys32_rt_sigqueueinfo(u32 pid, u32 sig, compat_siginfo_t __user *uinfo)
#
probe syscall.sys32_rt_sigqueueinfo =
		kernel.function("sys32_rt_sigqueueinfo") ? {
	name = "sys32_rt_sigqueueinfo"
	pid = $pid
	sig = $sig
	uinfo_uaddr = $uinfo
	argstr = sprintf("%p, %s, %p", pid, _signal_name($sig),
				uinfo_uaddr)
}
probe syscall.sys32_rt_sigqueueinfo.return =
	kernel.function("sys32_rt_sigqueueinfo").return ? {
	name = "sys32_rt_sigqueueinfo"
	retstr = returnstr(1)
}
# sys32_sigaltstack ________________________________________
#
# int sys32_sigaltstack(u32 __new, u32 __old, int r5,
#			int r6, int r7, int r8, struct pt_regs *regs)
#
probe syscall.sys32_sigaltstack = kernel.function("sys32_sigaltstack") ? {
	name = "sys32_sigaltstack"
	argstr = "FIXME"
}
probe syscall.sys32_sigaltstack.return =
	kernel.function("sys32_sigaltstack").return ? {
	name = "sys32_sigaltstack"
	retstr = returnstr(1)
}
# sys32_sendfile64 ________________________________________
#
# asmlinkage int sys32_sendfile64(int out_fd, int in_fd,
#		compat_loff_t __user *offset, s32 count)
#
probe syscall.sys32_sendfile64 = kernel.function("sys32_sendfile64") ? {
	name = "sys32_sendfile64"
	out_fd = $out_fd
	in_fd = $in_fd
	offset_uaddr = $offset
	count = $count
	argstr = sprintf("%d, %d, %p, %d", $out_fd, $in_fd, offset_uaddr,
				$count)
}
probe syscall.sys32_sendfile64.return =
	kernel.function("sys32_sendfile64").return ? {
	name = "sys32_sendfile64"
	retstr = returnstr(1)
}
# ppc32_timer_create ________________________________________
#
# long ppc32_timer_create(clockid_t clock,
#			struct compat_sigevent __user *ev32,
#			timer_t __user *timer_id)
#
probe syscall.ppc32_timer_create = kernel.function("ppc32_timer_create") ? {
	name = "ppc32_timer_create"
	which_clock = $clock
	timer_event_spec = $ev32
	created_timer_id = $timer_id
	argstr = sprintf("%d, %p, %p", which_clock, timer_event_spec,
				created_timer_id)
}
probe syscall.ppc32_timer_create.return =
	kernel.function("ppc32_timer_create").return ? {
	name = "ppc32_timer_create"
	retstr = returnstr(1)
}
# compat_timer_settime ________________________________________
#
# long compat_timer_settime(timer_t timer_id, int flags,
#			struct compat_itimerspec __user *new,
#			struct compat_itimerspec __user *old)
#
probe syscall.compat_timer_settime = kernel.function("compat_timer_settime") ? {
	name = "compat_timer_settime"
	timer_id = $timer_id
	flags = $flags
	new_setting_uaddr = $new
	old_setting_uaddr = $old
	argstr = sprintf("%d, %d, %p, %p", timer_id, flags,
				new_setting_uaddr, old_setting_uaddr)
}
probe syscall.compat_timer_settime.return =
	kernel.function("compat_timer_settime").return ? {
	name = "compat_timer_settime"
	retstr = returnstr(1)
}
# compat_timer_gettime ________________________________________
#
# long compat_timer_gettime(timer_t timer_id,
#		struct compat_itimerspec __user *setting)
#
probe syscall.compat_timer_gettime = kernel.function("compat_timer_gettime") ? {
	name = "compat_timer_gettime"
	timer_id = $timer_id
	setting_uaddr = $setting
	argstr = sprintf("%d, %p", timer_id, setting_uaddr)
}
probe syscall.compat_timer_gettime.return =
	kernel.function("compat_timer_gettime").return ? {
	name = "compat_timer_gettime"
	retstr = returnstr(1)
}
# compat_clock_settime ________________________________________
#
# long compat_clock_settime(clockid_t which_clock,
#			struct compat_timespec __user *tp)
#
probe syscall.compat_clock_settime = kernel.function("compat_clock_settime") ? {
	name = "compat_clock_settime"
	which_clock = $which_clock
	tp_uaddr = $tp
	argstr = sprintf("%d, %p", which_clock, tp_uaddr)
}
probe syscall.compat_clock_settime.return =
	kernel.function("compat_clock_settime").return ? {
	name = "compat_clock_settime"
	retstr = returnstr(1)
}
# sys32_swapcontext ________________________________________
#
# long sys32_swapcontext(struct ucontext32 __user *old_ctx,
#			struct ucontext32 __user *new_ctx,
#			int ctx_size, int r6, int r7, int r8,
#			struct pt_regs *regs)
#
probe syscall.sys32_swapcontext = kernel.function("sys32_swapcontext") ? {
	name = "sys32_swapcontext"
	old_ctx_uaddr = $old_ctx
	new_ctx_uaddr = $new_ctx
	r5 = $ctx_size
	r6 = $r6
	r7 = $r7
	r8 = $r8
	regs = $regs
	argstr = sprintf("%p, %p, %d, %d, %d, %d, %p",
			old_ctx_uaddr, new_ctx_uaddr, r5, r6, r7, r8, regs)
}
probe syscall.sys32_swapcontext.return =
	kernel.function("sys32_swapcontext").return ? {
	name = "sys32_swapcontext"
	retstr = returnstr(1)
}
# sys32_utimes ________________________________________
#
# asmlinkage long sys32_utimes(char __user *filename,
#			struct compat_timeval __user *tvs)
#
probe syscall.sys32_utimes = kernel.function("sys32_utimes") ? {
	name = "sys32_utimes"
	filename_uaddr = $filename
	path = user_string($filename)
	tvp_uaddr = $tvs
	argstr = sprintf("%s, %p", user_string_quoted($filename), tvp_uaddr)
}
probe syscall.sys32_utimes.return = kernel.function("sys32_utimes").return ? {
	name = "sys32_utimes"
	retstr = returnstr(1)
}
# compat_mbind ________________________________________
#
# asmlinkage long compat_mbind(compat_ulong_t start, compat_ulong_t len,
#			compat_ulong_t mode, compat_ulong_t __user *nmask,
#			compat_ulong_t maxnode, compat_ulong_t flags)
#
probe syscall.compat_mbind = kernel.function("compat_mbind") ? {
	name = "compat_mbind"
	start_uaddr = $start
	len = $len
	policy = $mode
	nodemask_uaddr = $nmask
	maxnode = $maxnode
	flags = $flags
	argstr = sprintf("%p, %d, %d, %p, %d, %d", start_uaddr, len,
			policy, nodemask_uaddr, maxnode, flags)
}
probe syscall.compat_mbind.return = kernel.function("compat_mbind").return ? {
	name = "compat_mbind"
	retstr = returnstr(1)
}
# compat_get_mempolicy ________________________________________
#
# asmlinkage long compat_get_mempolicy(int __user *policy,
#				compat_ulong_t __user *nmask,
#				compat_ulong_t maxnode,
#				compat_ulong_t addr, compat_ulong_t flags)
#
probe syscall.compat_get_mempolicy = kernel.function("compat_get_mempolicy") ? {
	name = "compat_get_mempolicy"
	policy_uaddr = $policy
	nmask_uaddr = $nmask
	maxnode = $maxnode
	addr = $addr
	flags = $flags
	argstr = sprintf("%p, %p, %d, %d", policy_uaddr, nmask_uaddr,
				maxnode, addr)
}
probe syscall.compat_get_mempolicy.return =
	kernel.function("compat_get_mempolicy").return ? {
	name = "compat_get_mempolicy"
	retstr = returnstr(1)
}
# compat_set_mempolicy ________________________________________
#
# asmlinkage long compat_set_mempolicy(int mode, compat_ulong_t __user *nmask,
#				compat_ulong_t maxnode)
#
probe syscall.compat_set_mempolicy = kernel.function("compat_set_mempolicy") ? {
	name = "compat_set_mempolicy"
	policy = $mode
	nodemask_uaddr = $nmask
	maxnode = $maxnode
	argstr = sprintf("%d, %p, %d", policy, nodemask_uaddr, maxnode)
}
probe syscall.compat_set_mempolicy.return =
	kernel.function("compat_set_mempolicy").return ? {
	name = "compat_set_mempolicy"
	retstr = returnstr(1)
}

# mmap
# long sys_mmap(unsigned long addr, size_t len,
#		       unsigned long prot, unsigned long flags,
#		       unsigned long fd, off_t offset)
#
probe syscall.mmap = kernel.function("sys_mmap") ? {
        name = "mmap"
        start = $addr
        len = $len
        prot = $prot
        flags = $flags
        fd = $fd
        offset = $offset
        argstr = sprintf("%p, %d, %s, %s, %d, %d", $addr, $len,
                _mprotect_prot_str($prot), _mmap_flags($flags), $fd, $offset)
}

probe syscall.mmap.return = kernel.function("sys_mmap").return ? {
        name = "mmap"
        retstr = returnstr(2)
}

# mmap2
# long sys_mmap2(unsigned long addr, size_t len,
#			unsigned long prot, unsigned long flags,
#			unsigned long fd, unsigned long pgoff)
# long compat_sys_mmap2(unsigned long addr, size_t len,
#			  unsigned long prot, unsigned long flags,
#			  unsigned long fd, unsigned long pgoff)
#
probe syscall.mmap2 = 
		kernel.function("sys_mmap2") ?,
		kernel.function("compat_sys_mmap2") ?
{
	name = "mmap2"
	start = $addr
	length = $len
	prot = $prot
	flags = $flags
	fd = $fd
	pgoffset = $pgoff
	argstr = sprintf("%p, %d, %s, %s, %d, %d", $addr, 
		$len, _mprotect_prot_str($prot), _mmap_flags($flags),
		$fd, $pgoff)
}
probe syscall.mmap2.return = 
		kernel.function("sys_mmap2").return ?,
		kernel.function("compat_sys_mmap2").return ?
{
	name = "mmap2"
	retstr = returnstr(2)
}

# ppc64_sys_stime ________________________________________
#
# long ppc64_sys_stime(long __user * tptr)
#
probe syscall.ppc64_sys_stime = kernel.function("ppc64_sys_stime") ? {
	name = "ppc64_sys_stime"
	/* FIXME */
	t_uaddr = $tptr
	argstr = sprintf("%p", t_uaddr)
}
probe syscall.ppc64_sys_stime.return =
	kernel.function("ppc64_sys_stime").return ? {
	name = "ppc64_sys_stime"
	retstr = returnstr(1)
}
# ppc64_newuname ________________________________________
#
# asmlinkage int ppc64_newuname(struct new_utsname __user * name)
#
probe syscall.ppc64_newuname = kernel.function("ppc64_newuname") ? {
	name = "ppc64_newuname"
	name_uaddr = $name
	argstr = sprintf("%p", name_uaddr)
}
probe syscall.ppc64_newuname.return = kernel.function("ppc64_newuname").return ? {
	name = "ppc64_newuname"
	retstr = returnstr(1)
}

#
#  

