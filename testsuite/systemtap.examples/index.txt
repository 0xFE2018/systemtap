SYSTEMTAP EXAMPLES INDEX
(see also subsystem-index.txt, keyword-index.txt)

general/graphs.stp - Graphing Disk and CPU Utilization
output: plot data, exits: user-controlled, status: production
subsystem: disk cpu, keywords: disk cpu use graph

  The script tracks the disk and CPU utilization. The resulting output
  of the script can be piped into gnuplot to generate a graph of disk
  and CPU USE.


general/helloworld.stp - SystemTap "Hello World" Program
output: text, exits: fixed, status: production
subsystem: none, keywords: simple

  A basic "Hello World" program implemented in SystemTap script. It
  prints out "hello world" message and then immediately exits.


general/para-callgraph.stp - Tracing Calls for Sections of Code
output: trace, exits: user-controlled, status: production
subsystem: kernel, keywords: trace callgraph

  The script takes two arguments: the first argument is the function to
  starts/stops the per thread call graph traces and the second argument
  is the list of functions to generate trace information on. The script
  prints out a timestap for the thread, the function name and pid,
  followed by entry or exit symboly and function name.


io/disktop.stp - Summarize Disk Read/Write Traffic
output: timed, exits: user-controlled, status: production
subsystem: disk, keywords: disk

  Get the status of reading/writing disk every 5 seconds, output top
  ten entries during that period.


io/io_submit.stp - Tally Reschedule Reason During AIO io_submit Call
output: sorted on-exit, exits: user-controlled, status: production
subsystem: io, keywords: io backtrace

  When a reschedule occurs during an AIO io_submit call, accumulate the
  traceback in a histogram. When the script exits prints out a sorted
  list from most common to least common backtrace.


io/iotime.stp - Trace Time Spent in Read and Write for Files 
output: trace, exits: user-controlled, status: production
subsystem: syscall, keywords: syscall read write time io

  The script watches each open, close, read, and write syscalls on the
  system. For each file the scripts observes opened it accumulates the
  amount of wall clock time spend in read and write operations and the
  number of bytes read and written. When a file is closed the script
  prints out a pair of lines for the file. Both lines begin with a
  timestamp in microseconds, the PID number, and the executable name in
  parenthesese. The first line with the "access" keyword lists the file
  name, the attempted number of bytes for the read and write
  operations. The second line with the "iotime" keyword list the file
  name and the number of microseconds accumulated in the read and write
  syscalls.


io/iotop.stp - Periodically Print I/O Activity by Process Name
output: timed, exits: user-controlled, status: production
subsystem: io, keywords: io

  Every five seconds print out the top ten executables generating I/O
  traffic during that interval sorted in descending order.


io/traceio.stp - Track Cumulative I/O Activity by Process Name
output: timed, exits: user-controlled, status: production
subsystem: io, keywords: io

  Every second print out the top ten executables sorted in descending
  order based on cumulative I/O traffic observed.


io/traceio2.stp - Watch I/O Activity on a Particular Device
output: trace, exits: user-controlled, status: production
subsystem: io, keywords: io

  Print out the executable name and process number as reads and writes
  to the specified device occur.


network/nettop.stp - Periodic Listing of Processes Using Network Interfaces
output: timed, exits: user-controlled, status: production
subsystem: network, keywords: network traffic per-process

  Every five seconds the nettop.stp script prints out a list of
  processed (PID and command) with the number of packets sent/received
  and the amount of data sent/received by the process during that
  interval.


network/socket-trace.stp - Trace Functions called in Network Socket Code
output: trace, exits: user-controlled, status: production
subsystem: network, keywords: network socket

  The script instrument each of the functions inn the Linux kernel's
  net/socket.c file. The script prints out trace. The first element of
  a line is  time delta in microseconds from the previous entry. This
  is followed by the command name and the PID. The "->" and "<-"
  indicates function entry and	function exit, respectively. The last
  element of the line is the function name.


process/futexes.stp - System-Wide Futex Contention
output: sorted-list on-exit, exits: user-controlled, status: production
subsystem: locking, keywords: syscall locking futex

  The script watches the futex syscall on the system. On exit the
  futexes address, the number of contentions, and the average time for
  each contention on the futex are printed from lowest pid number to
  highest.


process/pf2.stp - Profile kernel functions
output: sorted-list, exits: user-controlled, status: production
subsystem: kernel, keywords: profiling

  The pf2.stp script sets up time-based sampling. Every five seconds it
  prints out a sorted list with the top ten kernel functions with
  samples.


process/sig_by_pid.stp -  Signal Counts by Process ID
output: sorted-list on-exit, exits: user-controlled, status: experimental
subsystem: signals, keywords: signals

  Print signal counts by process ID in descending order.


process/sig_by_proc.stp -  Signal Counts by Process Name
output: sorted-list on-exit, exits: user-controlled, status: experimental
subsystem: signals, keywords: signals

  Print signal counts by process name in descending order.


process/sigkill.stp - Track SIGKILL Signals
output: trace, exits: user-controlled, status: production
subsystem: signals, keywords: signals

  The script traces any SIGKILL signals. When that SIGKILL signal is
  sent to a process, the script prints out the signal name, the
  desination executable and process ID, the executable name user ID
  that sent the signal.


process/syscalls_by_pid.stp - System-Wide Count of Syscalls by PID
output: trace, exits: user-controlled, status: experimental
subsystem: signals, keywords: signals

  The script watches for a particular signal sent to a specific
  process. When that signal is sent to the specified process, the
  script prints out the PID and executable of the process sending the
  signal, the PID and executable name of the process receiving the
  signal, and the signal number and name.


process/sleepingBeauties.stp - Generating Backtraces of Threads Waiting for IO Operations
output: trace, exits: user-controlled, status: production
subsystem: scheduler, keywords: io scheduler

  The script monitor time threads spend waiting for IO operations (in
  "D" state) in the wait_for_completion function. If a thread spends
  over 10ms wall-clock time waiting, information is printed out
  describing the thread number and executable name. When slow the
  wait_for_completion function complete, backtraces for the long
  duration calls are printed out.


process/sleeptime.stp - Trace Time Spent in nanosleep Syscalls
output: trace, exits: user-controlled, status: production
subsystem: syscall, keywords: syscall sleep

  The script watches each nanosleep syscall on the system. At the end
  of each nanosleep syscall the script prints out a line with a
  timestamp in microseconds, the pid, the executable name in
  paretheses, the "nanosleep:" key, and the duration of the sleep in
  microseconds.


process/syscalls_by_pid.stp - System-Wide Count of Syscalls by PID
output: sorted-list on-exit, exits: user-controlled, status: production
subsystem: syscall, keywords: syscall

  The script watches all syscall on the system. On exit the script
  prints a list showing the number of systemcalls executed by each PID
  ordered from greatest to least number of syscalls.


process/syscalls_by_proc.stp - System-Wide Count of Syscalls by Executable
output: sorted-list on-exit, exits: user-controlled, status: production
subsystem: syscall, keywords: syscall

  The script watches all syscall on the system. On exit the script
  prints a list showing the number of systemcalls executed by each
  executable ordered from greates to least number of syscalls.


process/wait4time.stp - Trace Time Spent in wait4 Syscalls
output: trace, exits: user-controlled, status: production
subsystem: syscall, keywords: syscall wait4

  The script watches each wait4 syscall on the system. At the end of
  each wait4 syscall the script prints out a line with a timestamp in
  microseconds, the pid, the executable name in paretheses, the
  "wait4:" key, the duration of the wait and the PID that the wait4 was
  waiting for. If the waited for PID is not specified , it is "-1".


profiling/functioncallcount.stp - Count Times Functions Called
output: sorted-list on-exit, exits: user-controlled, status: production
subsystem: kernel, keywords: profiling functions

  The functioncallcount.stp script takes one argument, a list of
  functions to probe. The script will run and count the number of times
  that each of the functions on the list is called. On exit the script
  will print a sorted list from most frequently to least frequently
  called function.


profiling/thread-times.stp - Profile kernel functions
output: sorted-list, exits: user-controlled, status: production
subsystem: kernel, keywords: profiling

  The thread-times.stp script sets up time-based sampling. Every five
  seconds it prints out a sorted list with the top twenty processes
  with samples broken down into percentage total time spent in
  user-space and kernel-space.


